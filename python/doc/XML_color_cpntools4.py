import sys
import cpntools4py
from xml.etree.ElementTree import Element
import re

from MCDC.LogFile import LogFile
from MCDC.MCDC_Table import MCDC_Table

# pattern = r"\W*EXPR\W*(?P<cond_name>\w+)\b"
pattern = r"[.\s]*(?<=EXPR)\W*(?P<cond_name>\w+)[.\s]*"
cond_regex = re.compile(pattern)
# example = '(* REQx  *)\n' \
#           '    EXPR("RQ4T1", AND(AND(AND(\n' \
#           '    AP("1", the_system_mode = preparing_weak_coffee),\n' \
#           '    AP("2",(time() - the_request_timer)  <= 30)),\n' \
#           '    AP("3", (time() - the_request_timer)  >= 10)),\n' \
#           '    NOT(AP("4",(String.isSuffix "REQ004" trace)))))\n'
# res = cond_regex.match(example)
# res.group('cond_name')


def main(file_name):
    xml_doc = cpntools4py.read_xml(file_name)
    cpn = cpntools4py.CPN(xml_doc)

    for arc in cpn.arcs:
        id = arc.id
        name = arc.text
        print(id, name)

    for trans in cpn.transitions:
        id = trans.get('id')
        name = trans.find('text').text
        print(id, name)


def set_color(element, color):
    # type: (Element, str) -> Element
    # <fillattr colour="White"
                  # pattern=""
                  # filled="false"/>
    # <lineattr colour="Black"
                  # thick="1"
                  # type="solid"/>
    fa = element.find('fillattr')
    fa.attrib['colour'] = color
    fa.attrib['filled'] = 'true'

    la = element.find('fillattr')
    la.attrib['colour'] = color

    return element


def extract_elements_with_conditions(xml_tree):
    # type: (ET) -> set
    # Transitions have conditions
    parent = {p for p in xml_tree.findall('.//cond/..')}
    return parent


def extract_elements_with_annotations(xml_tree):
    # type: (ET) -> set
    # Arcs have annotations
    parent = {p for p in xml_tree.findall('.//annot/..')}
    return parent

#TODO: Do we also process the "conditions" in the arcs? Right now, we only color transitions.
def find_element_by_expr_name(elements_with_conditions, expr_name):
    # type: (set, str) -> Element
    sname = expr_name.strip()
    for element in elements_with_conditions:
        cond = element.find('cond')
        text = cond.find('text').text
        if text is not None:
            # res = cond_regex.match(text)
            res = cond_regex.search(text)
            # print(text)
            # print(res)
            if res is not None:
                cond_name = res.group(1)
                if cond_name == sname:
                    print(cond_name, cond.attrib, element.attrib)
                    return element


def find_element_f(xml_tree, name):
    # type: (ET, str) -> Element
    root = xml_tree.getroot()
    sname = name.strip()
    for cond in root.iter('cond'):
        id = cond.get('id')
        text = cond.find('text').text
        if text is not None:
            res = cond_regex.match(text)
            if res is not None:
                cond_name = res.group(1)
                if cond_name == sname:
                    return cond
                # print(id, cond_name)


if __name__ == "__main__":
    log_filename = sys.argv[1]
    in_filename = sys.argv[2]
    out_filename = sys.argv[3]

    # LogFile generated by CPN Tool
    log = LogFile(filename=log_filename)
    # The LogFile contains several transition names (i.e., truth tables)
    # Each transition of the PN generates an MCDC_Table
    # All the transitions of the PN are stored in a dictionary of MCDC_Tables
    file = dict()
    for row in log.read_line():
        filtered_row = log.filter_line(row)
        if filtered_row is not None:
            # print(filtered_row)
            id_name, truth_values, result = filtered_row
            if id_name not in file.keys():
                file[id_name] = MCDC_Table(id_name)

            file[id_name].update(truth_values, result)

    xml_tree = ET.parse(in_filename)
    elements = extract_elements_with_conditions(xml_tree)
    for expr_name in file:
        e = find_element_by_expr_name(elements, expr_name)
        if e is not None:
            b, r = file[expr_name].is_mcdc_covered()
            color = 'Green' if b else 'Red'
            set_color(e, color)

    xml_tree.write(out_filename, xml_declaration=True)
